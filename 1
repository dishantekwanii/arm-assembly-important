  .syntax unified
  .cpu cortex-m4
  .fpu softvfp
  .thumb
  .global  Main

Main:
  
 @ Write your program here
  
  LDR R7, [R2]
  LDR R3, [R1]
  ADD R1, #4
  MOV R5, #1
  ADD R2, #4
  MOV R10, R1
  MOV R11, R2
  MOV R12, R0
  ADD R0, #4

LOOP:
   MOV R8, #0
   CMP R5, R3
   BGT EndLOOP
   LDR R6, [R1]

LOOP1:
  CMP R8, R7
   BEQ EndLOOP1
   LDR R9, [R2]
   CMP R9, R6
   BEQ SkipOver
   ADD R8, #1
   ADD R2, #4
   B LOOP1

EndLOOP1:
   STR R6, [R0]
   ADD R13, #1
   ADD R0, #4
   ADD R1, #4
   ADD R2, R11
   B LOOP

EndLOOP:
   MOV R1, R10
   MOV R2, R11
   MOV R5, #1
   MOV R8, #0
   B LOOP2

SkipOver:
  ADD R1, #4
  ADD R5, #1
  MOV R2, R11
  B LOOP

LOOP2:
  MOV R5, #0
  CMP R8, R7
  BEQ EndLOOP2
  LDR R9, [R2]

LOOP3:
  CMP R5, R3
  BEQ EndLOOP3
  LDR R6, [R1]
  CMP R9, R6
  BEQ SkipOver2
  ADD R5, #1
  ADD R1, #4
  B LOOP3

EndLOOP3:
  STR R9, [R0]
  ADD R13, #1
  ADD R0, #4
  ADD R2, #4
  ADD R1, R10
  B LOOP2

EndLOOP2:
 B SizeOfC

SkipOver2:
  ADD R2, #4
  ADD R8, #1
  MOV R1, R10
  B LOOP2

SizeOfC:
  MOV R0, R12
  STR R13, [R0]

  @ REMEMBER: Sets are stored in memory in the format ...
  @
  @   size, element1, element2, element3, etc.
  @
  @ where size is the number of elements in the set, element1 is
  @   the first element, element2 is the second element, etc.

  @ Debugging tips:
  @
  @ If using the View Memory window
  @   - view set A using address "&setA" and size 64
  @   - view set B using address "&setB" and size 64
  @   - view set C using address "&setC" and size 64
  @
  @ If using a Watch Expression
  @   view set A using expression "(int[16])setA"
  @   view set B using expression "(int[16])setB"
  @   view set C using expression "(int[16])setC"
  @
  @ BUT REMEMBER, the first value you see should be the size, 
  @  the second value will be the first element, etc. (see above!)

  @ End of program ... check your result

End_Main:
  BX    lr

